// <auto-generated />
using System;
using Itau.Research.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Itau.Research.Infra.Migrations
{
    [DbContext(typeof(SqlContext))]
    partial class SqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Itau.Research.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<Guid>("CategoryID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("FinalDate");

                    b.Property<DateTime>("InitialDate");

                    b.Property<string>("LocalName");

                    b.Property<string>("Sector");

                    b.Property<Guid>("TierID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("TierID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.EventSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("EventID");

                    b.Property<Guid>("SegmentID");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.HasIndex("SegmentID");

                    b.ToTable("EventSegment");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("SegmentID");

                    b.Property<Guid>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("SegmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Author");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Subtitle");

                    b.Property<Guid>("TierID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TierID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.ReportSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("ReportID");

                    b.Property<Guid>("SegmentID");

                    b.HasKey("Id");

                    b.HasIndex("ReportID");

                    b.HasIndex("SegmentID");

                    b.ToTable("ReportSegment");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<Guid>("UserID");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("EventId");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ReportId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ReportId");

                    b.ToTable("Segment");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Tier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tier");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("EventID");

                    b.Property<DateTime>("FinalDate");

                    b.Property<DateTime>("InitialDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.TrackPresence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsPresent");

                    b.Property<Guid>("TrackID");

                    b.Property<Guid>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("TrackID");

                    b.HasIndex("UserID");

                    b.ToTable("TrackPresence");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Cellphone");

                    b.Property<string>("Email");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsPassVerified");

                    b.Property<string>("Name");

                    b.Property<string>("Occupation");

                    b.Property<string>("Password");

                    b.Property<Guid>("TierID");

                    b.HasKey("Id");

                    b.HasIndex("TierID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Event", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Category", "Categoria")
                        .WithMany("Eventos")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Itau.Research.Domain.Models.Tier", "Tier")
                        .WithMany("Eventos")
                        .HasForeignKey("TierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.EventSegment", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Event", "Evento")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Itau.Research.Domain.Models.Segment", "Segmento")
                        .WithMany()
                        .HasForeignKey("SegmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Interest", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Segment", "Segmento")
                        .WithMany()
                        .HasForeignKey("SegmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Itau.Research.Domain.Models.User", "Usuario")
                        .WithMany("Interesses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Report", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Tier", "Tier")
                        .WithMany("Reports")
                        .HasForeignKey("TierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.ReportSegment", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Itau.Research.Domain.Models.Segment", "Segmento")
                        .WithMany()
                        .HasForeignKey("SegmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Score", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.User", "Usuario")
                        .WithMany("Scores")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Segment", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Event")
                        .WithMany("Segmentos")
                        .HasForeignKey("EventId");

                    b.HasOne("Itau.Research.Domain.Models.Report")
                        .WithMany("Segmentos")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.Track", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Event", "Evento")
                        .WithMany("Tracks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.TrackPresence", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Track", "Track")
                        .WithMany("TrackPresences")
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Itau.Research.Domain.Models.User", "Usuario")
                        .WithMany("TracksPresence")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Itau.Research.Domain.Models.User", b =>
                {
                    b.HasOne("Itau.Research.Domain.Models.Tier", "Tier")
                        .WithMany("Usuarios")
                        .HasForeignKey("TierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
